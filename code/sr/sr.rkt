;; sr.rkt
;; 20220711Z
;; jpt4
;; Stellar Resolution, from Eng and Seiller, 2020
;; Racket v8.5

#lang racket

(require minikanren)
(require minikanren/numbers)
(require "mk-prelude.rkt")

;; auxilliary definitions
(define (nullo n) (== '() n))

(define null-vars '())
(define null-colors  '())
(define null-func '())
(define null-arity '())
;; Colored Signature, C = (Vars, Colors<Func, Func, arity)
(define null-colored-signature (list null-vars null-colors null-func null-arity))

(define (null-varso v) (nullo v))
(define (null-colorso c) (nullo c))
(define (null-funco f) (nullo f))
(define (null-arityo a) (nullo a))
;; Colored Signature, C = (Vars, Colors<Func, Func, arity)
#;(define (colored-signatureo cs) 
  (fresh (v c f a)
	 (== `(,v ,c ,f ,a) cs)
	 (varo v)
	 (coloro c f)
	 (funco f)
	 (arity a f)))

(define function-symbols '(pluso minuso))
(define (varso v) (fresh () (symbolo v) (absento v function-symbols)))
(define (funco f) (membero f function-symbols))
(define colors function-symbols)
(define (coloro c) (membero c colors))
(define arity-map '((pluso 3) (minuso 3)))
(define (arityo a o) (assoco a arity-map o))

(define (termo t)
  (conde
   [(varso t)]
   [(fresh (f tn ar tna tnd)
           (== `(,f . ,tn) t) (funco f) 
           (lengtho tn ar) (arityo f ar)
           (== `(,tna . tnd) tn) (nullo tnd) 
           (termo tna))]
#;   [(fresh (f tn ar tna tnd)
           (== `(,f . ,tn) t) (funco f) 
           (lengtho tn ar) (arityo f ar)
           (== `(,tna . tnd) tn) (non-nullo tnd) 
           (termo tna) (termso tnd))]))


(define (termso tls)
  (conde
   [(nullo tls)]
   [(termo tls)]
   [(fresh (a d)
           (conso a d tls) (termso a) (termso d))]))

;; Ray r ::= +c(t1, ..., tn) | âˆ’c(t1, ..., tn) | t
;(define (rayo r)
 ; (fresh (pol col tls ar)
  ;       (conde
   ;       [(termo r)]
    ;      [(== `(,pol ,col ,tls) r)
     ;    (membero pol '(pol+ pol-)) (coloro col) (arityo col ar) 
      ;   (lengtho tls ar)
       ;  (conde
        ;  [(fresh (ta td)
         ;         (caro tls ta) (termo ta) (cdro tls td)
          ;        (rayo 

;; The end result; either generated by Scheme code to handle variable
;; renaming, or use alphaKanren.
#;(run 1 (q)
     (fresh (w x1 y1 z1 x2 y2 z2)
            (== `(add 0 ,w ,w) `(add ,x1 ,y1 ,z1))
            (== `(add (s ,x1) ,y1 (s ,z1)) `(add ,x2 ,y2 ,z2))
            (== `(add (s ,x2) ,y2 (s ,z2)) `(add (s (s 0)) (s (s 0)) ,q))))
